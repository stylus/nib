// helper

-type(prop)

  type  = 'ident'
  types = 'auto' 'inherit'

  if prop is a 'unit'
    type = 'unit'

  if prop in types
    type = 'unit'

  return type

-keys(props)

  props = arguments if length(arguments) > 1
  keys  = ()

  for prop in props
    if -type(prop) is 'ident'
      push(keys, prop)

  return keys

-vals(props)

  props  = arguments if length(arguments) > 1
  vals   = ()
  length = length(props)

  for prop, i in props

    type = -type(prop)

    if type is 'unit'
      push(vals, prop)
    else
      if previous is defined
        unless -type(previous) is 'unit'
          push(vals,0)

      if (i+1) == length
        push(vals,0)

    previous = prop

  return vals

-pos(type, args)

  keys = -keys(args)
  vals = -vals(args)

  position: unquote(type)

  for key, i in keys
    {key}: vals[i];


/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   fixed: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     fixed: top left
 *     fixed: top 5px left
 *     fixed: top left 5px
 *     fixed: top 5px left 5px
 *     fixed: top 5px left 5px right auto
 *     fixed: top 5px left 5px right auto bottom inherit
 *
 */

fixed()
  -pos('fixed', arguments)

/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   absolute: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     absolute: top left
 *     absolute: top 5px left
 *     absolute: top left 5px
 *     absolute: top 5px left 5px
 * 
 */

absolute()
  -pos('absolute', arguments)

/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   relative: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     relative: top left
 *     relative: top 5px left
 *     relative: top left 5px
 *     relative: top 5px left 5px
 * 
 */

relative()
  -pos('relative', arguments)
